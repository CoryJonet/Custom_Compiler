// Comments should not exist
//This shouldn't either

// Test decls
int b;
int _w;
int x12;
int y;
int z;
bool flag;
bool _what;
bool idkwhatisthis123;
void thisisntvlid;
void _blah;
void slfhsdfh1123;
// Test struct
struct node {
       bool thisIsABoolean;
       int a;
       void wut_lol;
       struct huh doesntExist;
};
// Test struct decl
struct node testNode;

// Test function
int test_arithmetic(int d, bool y){
    

    int moreVariables;
    bool yay;
    void boo;

    // Test ASSIGN
    b = 10;
    x12 = 5;
    y = 8;
    z = 4;
    z = -y;
    flag = false;

    _w = y + z;

    testNode.a = z;
    testNode.thisIsABoolean = false;

    // Test IF, NOTEQUALS, EQUALS, RETURN
    if((_w != 12) || (flag == true)) { return x;}

    // Test IF, GREATER, LESS, PLUSPLUS, MINUSMINUS, RETURN    
    if((z > 3) && (z<10)) {z++;z++; z--; return z;}

    // Test IF, GREATEREQ, LESSEQ, UNARYMINUS, RETURN
    if((z>=0) || (z <=2)) {z =z +-7; return z + y;}

    // Test ELSE, ASSIGN, MINUS, MULTI, DIVIDE
    else{b = x12 * 3 - 4 / 5 * 5; z = _w - x * 6; y = _w + x12 / 9; _w = b / z; return b;} 
}

// Test func with parameters
int endOfProgram(int blah) {

    cout << z;

}

// Test empty func
void thisIsPointless(){}

void main() {

     // More assign testing
     int h;
     int g;
     g = 10;
     k = false;

     // Test func call with parameters
     h = test_arithmetic(g, k);
     
     // Test struct sub field(s)
     if (testNode.a > 1){return b;} 
     
     // Test nested function, example on program spec page 
     if (b == -1) { test_arithmetic(w, a);x12 = 4+3*5-y; while (c) { y = y*2+x12; } } else { testNode.doesntExist = NULL;x12 = 0; }
          
     // Test COUT, CIN	  
     no_string_type = "Variables:";
     cout << no_string_listed;
     cout << "Enter something for z:";
     cin >> z;

     // Test WHILE, Nested func call, Nested struct assign
     while(z>0){testNode.wut_lol = nothing;thisIsPointless();z--;}

     // Test more func calls
     endOfProgram();
     thisIsPointless();
}
